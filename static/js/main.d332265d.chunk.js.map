{"version":3,"sources":["constants.ts","utils.ts","components/Frets.tsx","components/ShadowButton.tsx","components/InfoText.tsx","routes/Scales.tsx","routes/NoteTraining.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["note","noteNames","majorScaleIntervals","scaleNames","getLoopedArrayOfLengthFromIndex","array","length","start","shiftedArray","slice","concat","newArray","pointer","push","createFretStrings","strings","map","indexOf","console","log","createNoteSetFromIntervalsAtRoot","intervals","root","chromaticLength","reduce","sum","current","chromatic","output","i","guitarNotes","getFretId","fret","string","frets","columnsString","Array","fill","item","index","num","toString","reverse","join","inlays","Set","FretBoard","styled","div","FretSpace","props","disabled","Inlay","String","hovered","Marker","active","hollow","Fret","nextProps","this","marked","onClickFret","onClick","has","renderInlays","React","Component","markers","activeRange","id","key","button","selected","InfoText","p","Controls","Scales","useState","startFret","setStartFret","scale","setScale","E","setRoot","scaleMarker","notes","startPosition","startString","MAX_UPPER","MAX_LOWER","pointerString","pointerFret","findNotesOnFretboard","mode","octaves","modeIntervals","createScale","name","ShadowButton","onClickNoteName","Frets","views","NoteTraining","range","setRange","beginning","end","streak","setStreak","getNextMarkerToGuess","Math","floor","random","markerToGuess","setMarkerToGuess","onClickNote","noteName","getNoteFromFret","split","Number","getFretFromId","getNext","next","NavButton","App","scales","view","setView","className","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.d332265d.chunk.js","sourcesContent":["import { createFretStrings } from \"./utils\"\n\nexport enum note {\n  'A' = 'A',\n  'A♯' ='A♯',\n  'B' = 'B',\n  'C' = 'C',\n  'C♯' ='C♯',\n  'D' = 'D',\n  'D♯' ='D♯',\n  'E' = 'E',\n  'F' = 'F',\n  'F♯' ='F♯',\n  'G' = 'G',\n  'G♯' ='G♯',\n}\n\nexport const noteNames: Array<note> = [\n  note['A'],\n  note['A♯'],\n  note['B'],\n  note['C'],\n  note['C♯'],\n  note['D'],\n  note['D♯'],\n  note['E'],\n  note['F'],\n  note['F♯'],\n  note['G'],\n  note['G♯']\n]\n\nexport const majorScaleIntervals: Array<number> = [2, 2, 1, 2, 2, 2, 1]\n\nexport const scaleNames: Array<string> = [\n  'ionian', 'dorian', 'phrygian', 'lydian', 'mixolydian', 'aeolian', 'locrian'\n]","import { note, noteNames, majorScaleIntervals } from './constants'\nimport { FretType } from './components/Frets'\n\nexport function getLoopedArrayOfLengthFromIndex<T>(array: Array<T>, length: number, start: number): Array<T> {\n  const shiftedArray = array.slice(start).concat(array.slice(0, start))\n  let newArray = []\n  let pointer = 0\n  while (newArray.length < length) {\n    newArray.push(shiftedArray[pointer])\n    pointer = (pointer + 1) % array.length\n  }\n  return newArray\n}\n\nexport const createFretStrings = (): Array<Array<note>> => {\n  const stringCreator = (start: number) => getLoopedArrayOfLengthFromIndex(noteNames, 22, start)\n  const strings = [note['E'],note['A'],note['D'],note['G'],note['B'],note['E']].map(note => stringCreator(noteNames.indexOf(note)))\n  console.log(strings)\n  return strings\n}\n\nexport const createNoteSetFromIntervalsAtRoot = (intervals: Array<number>, root: note): Array<note> => {\n  const chromaticLength = intervals.reduce((sum, current) => sum + current, 0 )\n  const chromatic = getLoopedArrayOfLengthFromIndex(noteNames, chromaticLength, noteNames.indexOf(root))\n  console.log({chromatic})\n  const output: Array<note> = []\n  \n  let pointer = 0\n  for (let i = 0; i < intervals.length; i++) {\n    output.push(chromatic[pointer])\n    pointer = intervals[i] + pointer\n  }\n  // output.push(chromatic[0]) // append the last octave\n  console.log({output})\n  return output\n}\n\nexport const createScale = (root: note, mode: number, octaves = 2): Array<note> => {\n  const modeIntervals = getLoopedArrayOfLengthFromIndex(majorScaleIntervals, (octaves * 7) + 1, mode);\n  return createNoteSetFromIntervalsAtRoot(modeIntervals, root)\n}\n\nexport const guitarNotes = createFretStrings()\n\nexport const findNotesOnFretboard = (notes: Array<note>, startPosition?: FretType): Array<string> => {\n  console.log({notes, startPosition})\n  const frets: Array<FretType> = []\n  const startFret = startPosition ? startPosition.fret : guitarNotes[0].indexOf(notes[0])\n  const startString = startPosition ? startPosition.string : 0\n  \n  const MAX_UPPER = startFret > 0 ? 3 : 4 // so you dont have to move your hand so much to play a scale\n  const MAX_LOWER = startFret > 0 ? 1 : 0\n\n  frets.push({\n    fret: startFret,\n    string: startString\n  })\n\n  let pointerString = startString\n  for ( let i = 1; i < notes.length; i++ ) {\n    let pointerFret = startFret\n    while (\n      pointerString < 6 &&\n      guitarNotes[pointerString][pointerFret] !== notes[i]\n    ) {\n      pointerFret++\n      if (pointerFret - startFret > MAX_UPPER) {\n        pointerString ++\n        pointerFret = startFret - MAX_LOWER\n      }\n    }\n    frets.push({\n      fret: pointerFret,\n      string: pointerString\n    })\n  }\n\n  return frets.map(getFretId)\n}\n\n\nexport const getFretId = (fret: FretType): string => `${fret.fret}:${fret.string}`;\nexport const getFretFromId = (id: string): FretType => {\n  const [fret, string] = id.split(':')\n  return {\n    fret: Number(fret),\n    string: Number(string)\n  }\n}\n\nexport const getNoteFromFret = (fret: FretType): note => guitarNotes[fret.string][fret.fret]","import React, { useState } from 'react';\nimport styled from 'styled-components'\nimport { getFretId } from '../utils'\n\nexport interface FretType {\n  string: number,\n  fret: number,\n}\n\nconst frets: Array<FretType> = []\n\nfor (let string = 5; string >= 0; string--) {\n  for (let fret = 0; fret < 23; fret++) {\n    frets.push({\n      string: string,\n      fret: fret\n    })\n  }\n}\n\nconst columnsString: string = new Array(22)\n  .fill(1)\n  .map((item, index) => item * (.05 * index + 1))\n  .map(num => num.toString() + 'fr')\n  .reverse()\n  .join(' ')\n\nconst inlays = new Set([3, 5, 7, 9, 12, 15, 17, 19, 21])\n\nconst FretBoard = styled.div`\n  display: grid;\n  grid-template-columns: 0.5fr ${columnsString};\n  grid-template-rows: repeat(6, 1fr);\n  width: 100%;\n  box-shadow: 0px 00px 40px rgba(0, 0, 0, 0.15);\n  &:hover {\n    cursor: pointer;\n  }\n`\n\nconst height: number = 40\n\nconst FretSpace = styled.div<{fret: number, string: number, disabled: boolean}>`\n  display: inline-block;\n  height: ${height}px;\n  position: relative;\n  width: 100%;\n  box-sizing: border-box;\n  position: relative;\n  border-left: ${({fret}) => {\n    if (fret > 1) return '1px solid lightgrey;'\n    if (fret === 1) return '4px solid black;'\n    else return 'none;'\n  }}\n  ${props => props.disabled && `\n    background-color: #DDD;\n  `}\n  &:hover {\n    background-color: #EEE;\n  }\n`\n\nconst renderInlays = (fret: number, string: number) => {\n  if (inlays.has(fret)) {\n    if (fret !== 12) {\n      if (string === 3) return <Inlay />\n    }\n    // the 12th fret has two inlays\n    else {\n      if (string === 1 || string === 5) return <Inlay/>\n    }\n  }\n}\n\nconst Inlay = styled.div`\n  display: inline-block;\n  border-radius: 100%;\n  height: 15px;\n  width: 15px;\n  background-color: lightgrey;\n  position: absolute;\n  left: 50%;\n  bottom: 0;\n  transform: translate(-50%, 50%);\n  z-index: 2;\n`\n\nconst String = styled.div<{hovered: Boolean}>`\n  display: inline-block;\n  height: 2px;\n  background-color: grey;\n  position: absolute;\n  top: 50%;\n  width: calc(100% + 1px);\n  left: -1px;\n  transform: translateY(-50%);\n  transition: transform 100ms ease-in-out;\n  z-index: 2;\n  ${props => props.hovered && `\n    transform: translateY(-50%) scaleY(2);\n  `}\n`\n\nconst Marker = styled.div<{active: Boolean, hollow: Boolean}>`\n  display: inline-block;\n  height: 20px;\n  width: 20px;\n  background-color: black;\n  border-radius: 100%;\n  position: absolute;\n  left: 50%;\n  top: 50%;\n  transform: translate(-50%, -50%) scale(0);\n  transition: transform 200ms ease-in-out;\n  z-index: 2;\n  ${props => props.active && `\n    transform: translate(-50%, -50%) scale(1);\n  `}\n  ${props => props.hollow && `\n    box-sizing: border-box;\n    background-color: white;\n    border: 2px solid black;\n  `}\n`\n\ntype FretEvent = (fret: number, string: number) => any\n\ninterface FretboardProps {\n  onClickFret?: FretEvent;\n  markers: Set<String>;\n  activeRange?: Array<number>;\n}\n\n\ninterface FretProps {\n  fret: number,\n  string: number,\n  onClickFret: FretEvent,\n  marked: Boolean,\n  disabled: boolean,\n}\n\nclass Fret extends React.Component<FretProps> {\n  shouldComponentUpdate(nextProps: FretProps){\n    if (this.props.marked !== nextProps.marked) return true\n    if (this.props.disabled !== nextProps.disabled) return true\n    else return false\n  }\n\n  render(){\n    const {fret, string, onClickFret, marked, disabled } = this.props;\n    return (\n      <FretSpace \n        fret={fret}\n        string={string}\n        onClick={() => onClickFret(fret, string)}\n        disabled={disabled}\n      >\n        { renderInlays(fret, string) }\n        <String hovered={false}/>\n        <Marker active={marked} hollow={fret===0} />\n      </FretSpace>\n    )\n  }    \n}\n\nexport default ({onClickFret = () => {}, markers = new Set(), activeRange = [0, 23]}: FretboardProps) => {\n  return (\n      <FretBoard>\n        { \n          frets.map(({ fret, string }: FretType): any => {\n            const id: string = getFretId({fret, string})\n            return <Fret\n              key={id}\n              fret={fret}\n              string={string}\n              onClickFret={onClickFret}\n              marked={markers.has(id)}\n              disabled={fret >= activeRange[1] || fret < activeRange[0]}\n            />\n          })\n        }\n      </FretBoard>\n  )\n}","import styled from 'styled-components'\n\nexport default styled.button<{selected: Boolean}>`\n  border: none;\n  outline: none;\n  background-color: white;\n  margin: 10px;\n  padding: 10px;\n  box-shadow: 0px 0px 5px rgba(0, 0, 0, 0.2);\n  box-sizing: border-box;\n  border: 2px solid transparent;\n  border-radius: 5px;\n  min-height: 3em;\n  min-width: 3em;\n  &:hover{\n    cursor: pointer;\n    transform: scale(1.1);\n  }\n  &:active {\n    transform: scale(0.9);\n    box-shadow: none;\n  }\n  transition: all 200ms ease-in-out;\n  ${(props) => props.selected && `\n    box-shadow: none;\n    border: 2px solid darkgrey;\n  `\n  }\n`","import styled from 'styled-components'\n\nconst InfoText = styled.p`\n  max-width: 400px;\n  margin: 20px;\n  text-transform: none;\n`\n\nexport default InfoText;","\nimport React, { useState } from 'react';\nimport Frets, { FretType } from '../components/Frets';\nimport ShadowButton from '../components/ShadowButton';\nimport { note, noteNames, scaleNames } from '../constants';\nimport { findNotesOnFretboard, createScale, guitarNotes } from '../utils';\nimport styled from 'styled-components'\nimport InfoText from '../components/InfoText';\n\n\nconst Controls = styled.div`\n  margin-bottom: 50px;\n  margin-top: 50px;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`\n\n\nconst Scales = () => {\n\n  const [ startFret, setStartFret ] = useState<FretType>({fret: 0, string: 0});\n  const [ scale, setScale ] = useState(0)\n  const [ root, setRoot ] = useState(note.E)\n  \n  const onClickFret = (fret: number, string: number) => {\n    setStartFret({fret, string})\n    setRoot(guitarNotes[string][fret])\n  }\n\n  const onClickNoteName = (name: note) => {\n    setStartFret({fret: guitarNotes[0].indexOf(name), string: 0})\n    setRoot(name);\n  }\n\n  const scaleMarker: Set<String> = new Set(findNotesOnFretboard(createScale(root, scale), startFret))\n  \n  return (\n    <>\n      <InfoText>Click a note name or fret and a mode to build a scale starting from that note.</InfoText>\n      <Controls>\n        <div>\n          { noteNames.map(name => (\n            <ShadowButton\n              selected={root === name}\n              onClick={() => onClickNoteName(name)}\n            >{name}</ShadowButton>\n          ))}\n        </div>\n        <div>\n          { scaleNames.map((name, index) => (\n            <ShadowButton\n              selected={scale === index}\n              onClick={() => setScale(index)}\n            >{name}</ShadowButton>\n          ))}\n        </div>\n      </Controls>\n      <Frets\n        onClickFret={onClickFret}\n        markers={scaleMarker}\n      />\n    </>\n  )\n}\n\nexport default Scales","\nimport React, { useState } from 'react';\nimport Frets from '../components/Frets';\nimport ShadowButton from '../components/ShadowButton';\nimport { note, noteNames } from '../constants';\nimport { createFretStrings, getFretId, getNoteFromFret, getFretFromId } from '../utils';\nimport styled from 'styled-components'\nimport InfoText from '../components/InfoText';\n\nconst Controls = styled.div`\n  margin: 50px 0px;\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n`\n\nconst NoteTraining = () => {\n  const notes = createFretStrings();\n  const [ range, setRange ] = useState<Array<number>>([0, 4])\n  const [ beginning, end ] = range\n  const [ streak, setStreak ] = useState<number>(0)\n\n  const getNextMarkerToGuess = (): string => {\n    const string = Math.floor(Math.random() * notes.length)\n    const fret = Math.floor(Math.random() * end)\n    return getFretId({string, fret})\n  }\n\n  const [ markerToGuess, setMarkerToGuess ] = useState<string>(getNextMarkerToGuess())\n\n\n  const onNextNote = () => {\n    function getNext(): string{\n      const next = getNextMarkerToGuess()\n      if (next === markerToGuess) return getNext()\n      else return next\n    }\n\n    setMarkerToGuess(getNext())\n  }\n\n  const onClickNote = (noteName: note) => {\n    if (getNoteFromFret(getFretFromId(markerToGuess)) === noteName) {\n      onNextNote();\n      setStreak(streak + 1)\n    }\n    else {\n      setStreak(0)\n    }\n  }\n\n  const handleClickFret = (fret: number) => {\n    // todo: this doenst rly work yet\n    if (fret > beginning) {\n      setRange([beginning, fret])\n    }\n    else {\n      setRange([fret, end])\n    }\n  }\n\n  return (\n    <>\n      <InfoText>Guess the note marked by the dot. Click on the fretboard to change the available range.</InfoText>\n      <Controls>\n        <div>\n          { noteNames.map(name => (\n            <ShadowButton\n              key={name}\n              selected={false}\n              onClick={() => onClickNote(name)}\n            >{name}</ShadowButton>\n          ))}\n        </div>\n      </Controls>\n      <h2>Streak: {streak}</h2>\n      <Frets\n        onClickFret={handleClickFret}\n        markers={new Set([markerToGuess])}\n        activeRange={range}\n      />\n    </>\n  )\n}\n\nexport default NoteTraining","import React, { useState } from 'react';\nimport './App.css';\nimport Scales from './routes/Scales';\nimport NoteTraining from './routes/NoteTraining';\nimport styled from 'styled-components';\n\nenum views {\n  'notes' = 'notes',\n  'scales' = 'scales'\n}\n\nconst NavButton = styled.button<{active: Boolean}>`\n  border: none;\n  border-bottom: 2px solid transparent;\n  outline: none;\n  padding: 5px;\n  margin: 5px;\n  transition: all 200ms ease-in-out;\n  font-weight: 400;\n  ${props => props.active  && `\n    border-bottom: 2px solid black;\n  `\n  }\n  &:hover {\n    cursor: pointer;\n  }\n`\n\nfunction App() {\n  const [view, setView] = useState<views>(views.scales)\n\n  return (\n    <>\n      <div>\n        <NavButton\n          active={view === views.notes}\n          onClick={() => setView(views.notes)}\n        >\n          Note Guesser\n        </NavButton>\n        <NavButton\n          active={view === views.scales}\n          onClick={() => setView(views.scales)}\n        >\n          Scale Builder\n        </NavButton>\n      </div>\n      <div className=\"App\">\n        {\n          view === views.notes && <NoteTraining />\n        }\n        {\n          view === views.scales && <Scales />\n        }\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}